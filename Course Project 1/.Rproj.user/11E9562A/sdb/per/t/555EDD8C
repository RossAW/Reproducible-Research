{
    "contents" : "library(dplyr)\n\n# These if statements check to see if the data files have been read into R yet\n# If not, it will read the data files in. Only works if the data files have been\n# downloaded into the working directory \nif(!exists(\"featureLabels\")){\n    featureLabels<-read.table(\"./UCI HAR Dataset/features.txt\",header = FALSE)\n}\nif(!exists(\"XtestData\")){\n    XtestData<-read.table(\"./UCI HAR Dataset/test/X_test.txt\",header = FALSE,col.names = featureLabels[,2])\n}\nif(!exists(\"YtestData\")){\n    YtestData<-read.table(\"./UCI HAR Dataset/test/y_test.txt\",header = FALSE,col.names = \"Activity\" )\n}\nif(!exists(\"subjectTest\")){\n    subjectTest<-read.table(\"./UCI HAR Dataset/test/subject_test.txt\",header = FALSE,col.names = \"Subject\")\n}\nif(!exists(\"XtrainData\")){\n    XtrainData<-read.table(\"./UCI HAR Dataset/train/X_train.txt\",header = FALSE,col.names = featureLabels[,2])\n}\nif(!exists(\"YtrainData\")){\n    YtrainData<-read.table(\"./UCI HAR Dataset/train/y_train.txt\",header = FALSE,col.names = \"Activity\")\n}\nif(!exists(\"subjectTrain\")){\n    subjectTrain<-read.table(\"./UCI HAR Dataset/train/subject_train.txt\",header = FALSE,col.names = \"Subject\")\n}\n\n# This combines all the test and train variables. Then it combines the two data frames\n# into one big data frame\ntestData<-cbind(subjectTest,YtestData,XtestData)\ntrainData<-cbind(subjectTrain,YtrainData,XtrainData)\nCombinedData<-arrange(rbind(testData,trainData),Subject)\n\n# This will select only the variables of interest. i.e subject, activity and all \n# variables containing \"mean\" and \"std\".\nMeanSTDData<-cbind(select(CombinedData,1:2,contains(\"mean\")),select(CombinedData,contains(\"std\")))\n\n# This replaces the activity code with its description. There is defaintly a \n# better way of doing this.\nMeanSTDData$Activity[MeanSTDData$Activity==\"1\"]<-\"WALKING\"\nMeanSTDData$Activity[MeanSTDData$Activity==\"2\"]<-\"WALKING_UPSTAIRS\"\nMeanSTDData$Activity[MeanSTDData$Activity==\"3\"]<-\"WALKING_DOWNSTAIRS\"\nMeanSTDData$Activity[MeanSTDData$Activity==\"4\"]<-\"SITTING\"\nMeanSTDData$Activity[MeanSTDData$Activity==\"5\"]<-\"STANDING\"\nMeanSTDData$Activity[MeanSTDData$Activity==\"6\"]<-\"LAYING\"\n\n# This changes the variable names into somthing slightly more readable\nnames(MeanSTDData)<-gsub(\"^t\",\"Time\",names(MeanSTDData))\nnames(MeanSTDData)<-gsub(\"^f\",\"Frequency\",names(MeanSTDData))\nnames(MeanSTDData)<-gsub(\"BodyBody\",\"Body\",names(MeanSTDData))\nnames(MeanSTDData)<-gsub(\"Acc\",\"Acceleration\",names(MeanSTDData))\nnames(MeanSTDData)<-gsub(\"Mag\",\"Magnitude\",names(MeanSTDData))\nnames(MeanSTDData)<-gsub(\"[[:punct:]]\",\"\",names(MeanSTDData))\nnames(MeanSTDData)<-gsub(\"mean\",\"Mean\",names(MeanSTDData))\nnames(MeanSTDData)<-gsub(\"std\",\"StandardDeviation\",names(MeanSTDData))\n\n# This is where all the magic happens. It groups the data by subject and activity\n# and then averages all the variables. Much better than for loops.\ngroupedData<-group_by(MeanSTDData,Subject,Activity)\noutputData<-summarise_each(groupedData,funs(mean))\n\n# This creates a file with the outputData.\nwrite.table(outputData,file = \"TidyOutputData.txt\",row.names = FALSE)\n\n# You can use this line to read it into R again. Worked for me but you might \n# need to change it if your on a Mac or if you didn't put the file in your\n# working directory.\n\n# TidyOutputData<-read.table(\"TidyOutputData\",header = TRUE)\n",
    "created" : 1442056244595.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1102175045",
    "id" : "555EDD8C",
    "lastKnownWriteTime" : 1440074050,
    "path" : "C:/Users/Ross Weston/GitHub Repos/Getting and Cleaning Data Course Project/run_analysis.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}